{
  "openapi": "3.0.3",
  "info": {
    "title": "Loono API",
    "description": "Loono API for the mobile application. The whole API is JSON based.\n\nFailed API operations return [Error](https://okarmazin.stoplight.io/docs/loono/c2NoOjI2ODI2OA-error-response).\n\nGeneral error codes:\n|HTTP Status|code |description|\n|--- |--- | --- |\n|400|MISSING_PRIMARY_EMAIL| The Firebase login method did not include user email. Email is required and must be saved in Firebase before any API access. |\n|400|MISSING_USER_NAME| The Firebase login method did not include user name. Name is required and must be saved in Firebase before any API access. |",
    "contact": {
      "name": "Loono",
      "url": "https://www.loono.cz/"
    },
    "license": {
      "name": "MIT license",
      "url": "http://www.opensource.org/licenses/mit-license.html"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://loono.ceskodigital.net:443/v1",
      "description": "Inferred Url"
    }
  ],
  "tags": [
    {
      "name": "Account"
    },
    {
      "name": "Leaderboard"
    },
    {
      "name": "Onboarding",
      "externalDocs": {
        "url": "https://docs.google.com/document/d/1btjnZTfRJ5VQMvmTMv4Za5UCf8qBC2jo6tXKNjPMqVc/edit"
      }
    },
    {
      "name": "Examinations"
    },
    {
      "name": "Providers"
    }
  ],
  "paths": {
    "/account": {
      "summary": "Retrieve Account information of the current user.",
      "description": "Contains all the information needed to display the root Account (TODO name) screen. This isncludes",
      "get": {
        "tags": ["Account"],
        "summary": "Get Account",
        "operationId": "getAccount",
        "description": "GET the account information of the current user.",
        "responses": {
          "200": {
            "description": "Account successfully Deleted. Returns an empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Account Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "parameters": []
      },
      "delete": {
        "summary": "Delete account",
        "operationId": "delete-account",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Deletes the user account and all associated data. This action is irreversible.\n\n\nIf it is necessary to keep certain pieces of information, for instance to comply with legal requirements, that data is anonymized to the maximum possible extent.\n\nSpecific error codes:\n\n|HTTP Status| code |description|\n|--- |--- | --- |\n|403|RECENT_LOGIN_REQUIRED| User must reauthenticate. Equivalent to the [FirebaseAuthRecentLoginRequiredException](https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuthRecentLoginRequiredException)(Android) |",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "tags": ["Account"]
      },
      "post": {
        "summary": "Update account",
        "operationId": "post-account",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Update account",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            }
          }
        },
        "tags": ["Account"]
      }
    },
    "/leaderboard": {
      "get": {
        "summary": "Get Leaderboard",
        "tags": ["Leaderboard"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leaderboard"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "getLeaderboard",
        "description": "Returns the top leading accounts.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "leaderboard_size",
            "description": "Count of leading accounts"
          }
        ]
      },
      "parameters": []
    },
    "/examinations": {
      "get": {
        "summary": "Get Examinations Status",
        "tags": ["Examinations"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreventionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "getExaminations",
        "description": "Returns the examination records of the current user.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete examination",
        "operationId": "deleteExamination",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Deletes the specific exam and all associated data. This action is irreversible.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExaminationId"
              }
            }
          },
          "description": ""
        },
        "tags": ["Examinations"]
      },
      "post": {
        "summary": "Create or update examination record",
        "description": "Creating or updating an examination.",
        "operationId": "post-examinations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExaminationRecord"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExaminationRecord"
              }
            }
          }
        },
        "tags": ["Examinations"]
      }
    },
    "/examinations/confirm": {
      "post": {
        "summary": "Confirm Examination",
        "operationId": "completeExamination",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExaminationRecord"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": ["Examinations"],
        "description": "Notify the API that an examination has been performed.\n\nThe date of the completion must not be in the future.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExaminationId"
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/examinations/{self-type}/self": {
      "post": {
        "summary": "Confirm Self-Examination",
        "operationId": "confirmSelfExamination",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfExaminationCompletionInformation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": ["Examinations"],
        "description": "Notify the API that an self-examination has been completed.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfExaminationResult"
              }
            }
          },
          "description": ""
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "self-type",
          "in": "path",
          "required": true,
          "description": "One of the `SelfExaminationType` values"
        }
      ]
    },
    "/examinations/{self-type}/result": {
      "post": {
        "summary": "Self-Examination result finding",
        "operationId": "resultSelfExamination",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfExaminationFindingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": ["Examinations"],
        "description": "Sending result of the finding.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfExaminationResult"
              }
            }
          },
          "description": ""
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "self-type",
          "in": "path",
          "required": true,
          "description": "One of the `SelfExaminationType` values"
        }
      ]
    },
    "/examinations/cancel": {
      "post": {
        "summary": "Cancel Examination",
        "operationId": "cancelExamination",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExaminationRecord"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": ["Examinations"],
        "description": "Notify the API that an examination has been performed.\n\nThe date of the completion must not be in the future.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExaminationId"
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/providers/all": {
      "get": {
        "summary": "Gets all healthcare providers data",
        "tags": ["Providers"],
        "responses": {
          "200": {
            "description": "Returns a zip file with providers.json.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity: Server is updating data or the file cannot be downloaded."
          }
        },
        "operationId": "get-providers-all",
        "description": "Getting all healthcare providers.\n\nList of all healthcare providers in the simple form. The file format is JSON and it is zipped.",
        "security": [
          {
            "Bearer_Auth": []
          }
        ]
      }
    },
    "/providers/details": {
      "post": {
        "summary": "Gets details of given healthcare providers",
        "operationId": "post-providers-detail",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcareProviderDetailList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Provider Not Found"
          },
          "422": {
            "description": "Unprocessable Entity: Incorrect request"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthcareProviderIdList"
              }
            }
          },
          "description": "Healthcare provider IDs"
        },
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "description": "Returns complete details of multiple healthcare providers",
        "tags": ["Providers"]
      },
      "parameters": []
    },
    "/providers/update": {
      "get": {
        "summary": "Trigger healthcare provider update",
        "description": "Trigger to execute the providers update manually.",
        "tags": ["Providers"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStatusMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable Entity: update failed"
          }
        },
        "operationId": "get-providers-update",
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/providers/lastupdate": {
      "get": {
        "summary": "Gets last date of healthcare provider update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcareProviderLastUpdate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-providers-lastupdate",
        "description": "Return a date of the latest update in form YYYY-MM-DD.",
        "tags": ["Providers"]
      }
    },
    "/account/onboard": {
      "post": {
        "summary": "",
        "operationId": "post-account-onboard",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": ["Account"],
        "description": "Onboarding / creating an account",
        "security": [
          {
            "Bearer_Auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountOnboarding"
              }
            }
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "summary": "Sending a user feedback",
        "operationId": "feedback",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Send a user feedback which should be stored",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFeedback"
              }
            }
          }
        }
      }
    },
    "/testCall": {
      "post": {
        "summary": "For testing purposes only - remove in release",
        "operationId": "test",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "For testing purposes only - remove in release",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExaminationId"
              }
            }
          },
          "description": ""
        }
      }
    },
    "/consultancyForm": {
      "post": {
        "summary": "Sends email with question to user and doctor in Loono",
        "operationId": "postConsultancyFrom",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Sends email with question to user and doctor in Loono",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsultancyFormContent"
              }
            }
          },
          "description": ""
        }
      }
    },
    "/addEmailUser": {
      "post": {
        "summary": "Adds subscribed users to smartemailing",
        "operationId": "addEmailUser",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Adds user email to list"
      }
    },
    "/providers/updateCorrectedProviders": {
      "post": {
        "summary": "Update corrected providers",
        "operationId": "updateCorrectedProvidersFunc",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Update corrected providers"
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "title": "Account",
        "description": "Account information of the current user. Includes the user profile, account settings and points.",
        "properties": {
          "uid": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "preferredEmail": {
            "type": "string"
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "birthdate": {
            "type": "string",
            "format": "date"
          },
          "profileImageUrl": {
            "type": "string",
            "nullable": true
          },
          "leaderboardAnonymizationOptIn": {
            "type": "boolean"
          },
          "appointmentReminderEmailsOptIn": {
            "type": "boolean"
          },
          "newsletterOptIn": {
            "type": "boolean"
          },
          "points": {
            "type": "integer",
            "description": "The total amount of points earned by the user from gamification features.",
            "format": "int32",
            "minimum": 0
          },
          "badges": {
            "$ref": "#/components/schemas/Badges"
          },
          "createdAt": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "uid",
          "nickname",
          "preferredEmail",
          "sex",
          "birthdate",
          "leaderboardAnonymizationOptIn",
          "appointmentReminderEmailsOptIn",
          "newsletterOptIn",
          "points",
          "badges",
          "createdAt"
        ],
        "readOnly": true
      },
      "AccountUpdate": {
        "type": "object",
        "title": "Account Update",
        "description": "Object to able to update the account.",
        "properties": {
          "nickname": {
            "type": "string"
          },
          "preferredEmail": {
            "type": "string"
          },
          "profileImageUrl": {
            "type": "string",
            "nullable": true
          },
          "leaderboardAnonymizationOptIn": {
            "type": "boolean"
          },
          "appointmentReminderEmailsOptIn": {
            "type": "boolean"
          },
          "newsletterOptIn": {
            "type": "boolean"
          }
        },
        "readOnly": true
      },
      "AccountOnboarding": {
        "type": "object",
        "title": "Account Onboarding",
        "description": "Account information collected during onboarding to create a new account.",
        "properties": {
          "nickname": {
            "type": "string"
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "preferredEmail": {
            "type": "string"
          },
          "birthdate": {
            "type": "string",
            "format": "date"
          },
          "examinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExaminationRecord"
            }
          },
          "newsletterOptIn": {
            "type": "boolean"
          }
        },
        "required": [
          "nickname",
          "sex",
          "preferredEmail",
          "birthdate",
          "examinations",
          "newsletterOptIn"
        ],
        "readOnly": true
      },
      "Error": {
        "title": "Error response",
        "description": "When an API operation fails, API returns this error which may contain a specific error code pertaining to the failed operation.\n\nAll fields are optional and nullable.",
        "type": "object",
        "properties": {
          "code": {
            "description": "Machine readable error code. Error codes are defined by the individual API operations. Error code may be used by the client application for UX tailoring.",
            "type": "string",
            "nullable": true
          },
          "message": {
            "description": "Human readable error message. These messages are only rarely shown to users and are more often used as a debugging tool for API clients. ",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExaminationId": {
        "title": "ExaminationId",
        "type": "object",
        "description": "A examination identification.",
        "properties": {
          "uuid": {
            "type": "string"
          }
        }
      },
      "LeaderboardUser": {
        "title": "Leaderboard user",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User nickname. Anonymized if the user opted in to leaderboard anonymization.",
            "readOnly": true
          },
          "profileImageUrl": {
            "type": "string",
            "description": "Profile image of the user.",
            "nullable": true,
            "readOnly": true
          },
          "points": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "readOnly": true
          },
          "isThisMe": {
            "type": "boolean",
            "description": "If `true`, this is the profile of the current user. Not required, default `false`",
            "readOnly": true
          }
        },
        "required": ["name", "points"]
      },
      "Leaderboard": {
        "title": "Leaderboard",
        "description": "Rendered leaderboard from the POV of the authenticated user. Contains the top profiles.",
        "type": "object",
        "properties": {
          "top": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardUser"
            }
          },
          "peers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardUser"
            }
          },
          "myOrder": {
            "type": "integer"
          }
        },
        "required": ["top", "peers", "myOrder"]
      },
      "BadgeType": {
        "type": "string",
        "title": "Badge type",
        "description": "Available badges enum",
        "enum": [
          "COAT",
          "TOP",
          "BELT",
          "SHOES",
          "GLOVES",
          "HEADBAND",
          "GLASSES",
          "SHIELD",
          "PAULDRONS"
        ]
      },
      "Sex": {
        "type": "string",
        "title": "Sex",
        "description": "Sex enum",
        "enum": ["MALE", "FEMALE"]
      },
      "ExaminationType": {
        "type": "string",
        "title": "ExaminationType",
        "description": "Specialists",
        "enum": [
          "COLONOSCOPY",
          "DERMATOLOGIST",
          "MAMMOGRAM",
          "OPHTHALMOLOGIST",
          "ULTRASOUND_BREAST",
          "UROLOGIST",
          "DENTIST",
          "GENERAL_PRACTITIONER",
          "PHYSIOTHERAPY",
          "PEDIATRICIAN",
          "GYNECOLOGIST",
          "INTERN",
          "SURGERY",
          "ORTHOPEDICS",
          "REHABILITATION",
          "PSYCHIATRY",
          "NEUROLOGY",
          "PSYCHOLOGY",
          "ENDOCRINOLOGY_AND_HORMONES",
          "DENTAL_HYGIENE",
          "CARDIOLOGY",
          "ORL",
          "SPEECH_THERAPIST",
          "ALLERGOLOGY",
          "IMMUNOLOGY",
          "ORTHODONTICS",
          "PULMONARY",
          "HEMATOLOGY",
          "GASTROENTEROLOGY",
          "RHEUMATOLOGY",
          "PALLIATIVE_MEDICINE",
          "NEPHROLOGY",
          "VASCULAR",
          "ERGOTHERAPY",
          "ONCOLOGY",
          "NUTRITION",
          "PHONIATRICS",
          "GENETICS",
          "SPORTS_MEDICINE",
          "SEXOLOGY",
          "REPRODUCTIVE_MEDICINE",
          "OTHER"
        ]
      },
      "ExaminationActionType": {
        "type": "string",
        "title": "ExaminationActionType",
        "description": "",
        "enum": ["EXAMINATION", "CONTROL", "BLOOD_COLLECTION", "VISUALIZATION_METHODS"],
        "default": "EXAMINATION"
      },
      "ExaminationCategoryType": {
        "type": "string",
        "title": "ExaminationCategoryType",
        "description": "",
        "enum": ["MANDATORY", "CUSTOM"],
        "default": "MANDATORY"
      },
      "SelfExaminationType": {
        "type": "string",
        "title": "SelfExaminationType",
        "description": "",
        "enum": ["BREAST", "TESTICULAR", "SKIN"]
      },
      "SimpleHealthcareProvider": {
        "title": "SimpleHealthcareProvider",
        "type": "object",
        "description": "Simplified healthcare provider record.",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int64"
          },
          "institutionId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "houseNumber": {
            "type": "string"
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "specialization": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lng": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "locationId",
          "institutionId",
          "title",
          "city",
          "postalCode",
          "houseNumber",
          "category",
          "lat",
          "lng"
        ]
      },
      "UpdateStatusMessage": {
        "title": "UpdateStatusMessage",
        "type": "object",
        "description": "Update status of the update of healthcare providers",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": ["message"]
      },
      "HealthcareProviderId": {
        "title": "HealthcareProviderId",
        "type": "object",
        "description": "Composite key of the healthcare provider",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int64"
          },
          "institutionId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["locationId", "institutionId"]
      },
      "HealthcareProviderDetail": {
        "title": "HealthcareProviderDetail",
        "type": "object",
        "description": "The details of a single healthcare provider record.",
        "properties": {
          "locationId": {
            "type": "integer",
            "format": "int64"
          },
          "institutionId": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "institutionType": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "houseNumber": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "ico": {
            "type": "string"
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "specialization": {
            "type": "string"
          },
          "careForm": {
            "type": "string"
          },
          "careType": {
            "type": "string"
          },
          "substitute": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lng": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "locationId",
          "institutionId",
          "title",
          "institutionType",
          "houseNumber",
          "city",
          "postalCode",
          "ico",
          "category",
          "lat",
          "lng"
        ]
      },
      "HealthcareCategoryType": {
        "type": "string",
        "title": "HealthcareCategoryType",
        "description": "",
        "enum": [
          "ADDICTIONS",
          "ALLERGOLOGY",
          "IMMUNOLOGY",
          "ANESTHESIOLOGY_ARO",
          "SURGERY",
          "ANGIOLOGY",
          "ENDOCRINOLOGY",
          "DIABETOLOGY",
          "DERMATOVENEROLOGY",
          "DENTAL_HYGIENE",
          "OCCUPATIONAL_THERAPY",
          "PHYSIOTHERAPY",
          "PHONIATRICS",
          "REHABILITATION",
          "GASTROENTEROLOGY",
          "GERIATRICS",
          "GYNECOLOGY",
          "REPRODUCTIVE_MEDICINE",
          "HEMATOLOGY",
          "HYGIENE",
          "INFECTIOUS_MEDICINE",
          "INTERNAL_MEDICINE",
          "CARDIOLOGY",
          "SPEECH_THERAPY",
          "AERO_MEDICINE",
          "ONCOLOGY",
          "BIOCHEMISTRY",
          "GENETICS",
          "MICROBIOLOGY",
          "NEPHROLOGY",
          "NEUROLOGY",
          "NEONATAL",
          "OPHTHALMOLOGY",
          "ORTHOPEDICS",
          "ENT",
          "PALLIATIVE_MEDICINE",
          "PATHOLOGY",
          "PNEUMOLOGY",
          "GENERAL_PRACTICAL_MEDICINE",
          "PEDIATRICIAN",
          "PSYCHIATRY",
          "PSYCHOLOGY",
          "OCCUPATIONAL_MEDICINE",
          "RADIOLOGY",
          "RHEUMATOLOGY",
          "UROLOGY",
          "NUTRITION",
          "NURSE",
          "SEXOLOGY",
          "FORENSIC_MEDICINE",
          "SPORTS_MEDICINE",
          "SOCIAL_WORKER",
          "DENTIST",
          "ORTHODONTICS",
          "DENTAL_TECHNICIAN",
          "MEDICAL_LABORATORY_TECHNICIAN",
          "PARAMEDIC",
          "SPECIALIST",
          "PHARMACOLOGY",
          "LDN",
          "BEHAVIORAL_ANALYST",
          "PUBLIC_HEALTHCARE",
          "RADIOLOGICAL_PHYSICIST",
          "PSYCHOSOMATICS",
          "BIOMEDICAL_TECHNICIAN"
        ]
      },
      "HealthcareProviderLastUpdate": {
        "title": "HealthcareProviderLastUpdate",
        "type": "object",
        "description": "Provides a date of the last healthcare providers update",
        "properties": {
          "lastUpdate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": ["lastUpdate"]
      },
      "HealthcareProviderDetailList": {
        "title": "HealthcareProviderDetailList",
        "type": "object",
        "properties": {
          "healthcareProvidersDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthcareProviderDetail"
            }
          }
        },
        "required": ["healthcareProvidersDetails"]
      },
      "HealthcareProviderIdList": {
        "title": "HealthcareProviderIdList",
        "type": "object",
        "description": "List of healthcare providers Ids",
        "properties": {
          "providersIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthcareProviderId"
            }
          }
        }
      },
      "ExaminationStatus": {
        "type": "string",
        "title": "ExaminationStatus",
        "description": "Status enum of the examination",
        "enum": ["NEW", "CONFIRMED", "CANCELED", "UNKNOWN"],
        "default": "UNKNOWN"
      },
      "ExaminationPreventionStatus": {
        "type": "object",
        "title": "ExamanationPreventionStatus",
        "description": "Overview status of examinations",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "examinationType": {
            "$ref": "#/components/schemas/ExaminationType"
          },
          "intervalYears": {
            "type": "integer"
          },
          "customInterval": {
            "type": "integer",
            "nullable": true
          },
          "plannedDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstExam": {
            "type": "boolean"
          },
          "periodicExam": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer"
          },
          "state": {
            "$ref": "#/components/schemas/ExaminationStatus"
          },
          "count": {
            "type": "integer"
          },
          "lastConfirmedDate": {
            "type": "string",
            "format": "date-time"
          },
          "points": {
            "type": "integer"
          },
          "badge": {
            "$ref": "#/components/schemas/BadgeType",
            "nullable": true
          },
          "examinationCategoryType": {
            "$ref": "#/components/schemas/ExaminationCategoryType"
          },
          "examinationActionType": {
            "$ref": "#/components/schemas/ExaminationActionType"
          },
          "note": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "required": [
          "examinationType",
          "intervalYears",
          "firstExam",
          "priority",
          "state",
          "count",
          "points"
        ]
      },
      "SelfExaminationPreventionStatus": {
        "type": "object",
        "title": "SelfExamanationPreventionStatus",
        "description": "Overview status of self-examinations",
        "properties": {
          "lastExamUuid": {
            "type": "string"
          },
          "plannedDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "$ref": "#/components/schemas/SelfExaminationType"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfExaminationStatus"
            }
          },
          "points": {
            "type": "integer"
          },
          "badge": {
            "$ref": "#/components/schemas/BadgeType"
          }
        },
        "required": ["type", "history", "points", "badge"]
      },
      "Badge": {
        "type": "object",
        "title": "Badge",
        "description": "Badge owned by the user",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BadgeType"
          },
          "level": {
            "type": "integer"
          }
        },
        "required": ["type", "level"]
      },
      "Badges": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Badge"
        }
      },
      "ExaminationRecord": {
        "title": "ExaminationRecord",
        "type": "object",
        "description": "Examination object to update or create an object",
        "properties": {
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ExaminationType"
          },
          "plannedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ExaminationStatus"
          },
          "firstExam": {
            "type": "boolean",
            "default": false
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "customInterval": {
            "type": "integer",
            "nullable": true
          },
          "periodicExam": {
            "type": "boolean",
            "default": true
          },
          "examinationCategoryType": {
            "$ref": "#/components/schemas/ExaminationCategoryType",
            "nullable": true
          },
          "examinationActionType": {
            "$ref": "#/components/schemas/ExaminationActionType",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "required": ["type"]
      },
      "PreventionStatus": {
        "title": "PreventionStatus",
        "type": "object",
        "description": "Overview prevention statuses of all examinations",
        "properties": {
          "examinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExaminationPreventionStatus"
            }
          },
          "selfexaminations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelfExaminationPreventionStatus"
            }
          }
        },
        "required": ["examinations", "selfexaminations"]
      },
      "SelfExaminationStatus": {
        "type": "string",
        "title": "SelfExaminationStatus",
        "description": "Self-examination statuses",
        "enum": [
          "PLANNED",
          "COMPLETED",
          "MISSED",
          "WAITING_FOR_CHECKUP",
          "WAITING_FOR_RESULT"
        ],
        "default": "PLANNED"
      },
      "SelfExaminationResult": {
        "type": "object",
        "title": "SelfExaminationResult",
        "description": "",
        "properties": {
          "result": {
            "type": "string",
            "enum": ["FINDING", "NOT_OK", "OK"],
            "default": "OK"
          }
        }
      },
      "SelfExaminationCompletionInformation": {
        "title": "SelfExaminationCompletionInformation",
        "type": "object",
        "description": "Information about point and badges after self-examination completion.",
        "properties": {
          "points": {
            "type": "integer"
          },
          "allPoints": {
            "type": "integer"
          },
          "badgeType": {
            "$ref": "#/components/schemas/BadgeType"
          },
          "badgeLevel": {
            "type": "integer"
          },
          "streak": {
            "type": "integer"
          }
        },
        "required": ["points", "allPoints", "badgeType", "badgeLevel", "streak"]
      },
      "SelfExaminationFindingResponse": {
        "title": "SelfExaminationFindingResponse",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": ["message"],
        "description": "Return message after sending the finding status."
      },
      "UserFeedback": {
        "title": "UserFeedback",
        "type": "object",
        "properties": {
          "evaluation": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "required": ["evaluation"],
        "description": "User feedback to be stored."
      },
      "ConsultancyFormContent": {
        "title": "EmailContent",
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "nullable": false
          },
          "message": {
            "type": "string",
            "nullable": false
          }
        },
        "required": ["evaluation"],
        "description": "User feedback to be stored."
      }
    },
    "securitySchemes": {
      "Bearer_Auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "Basic_Auth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
